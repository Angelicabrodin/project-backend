{
  "{\"sourceRoot\":\"/Users/angelicabrodin/Desktop/backend/project-backend\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"/Users/angelicabrodin/Desktop/backend/project-backend\",\"filename\":\"/Users/angelicabrodin/Desktop/backend/project-backend/server.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/angelicabrodin/Desktop/backend/project-backend\",\"plugins\":[],\"presets\":[]}:7.8.3": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/angelicabrodin/Desktop/backend/project-backend",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "/Users/angelicabrodin/Desktop/backend/project-backend",
      "filename": "/Users/angelicabrodin/Desktop/backend/project-backend/server.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/Users/angelicabrodin/Desktop/backend/project-backend",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/angelicabrodin/Desktop/backend/project-backend/server.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "/Users/angelicabrodin/Desktop/backend/project-backend/server.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/angelicabrodin/Desktop/backend/project-backend",
        "sourceFileName": "server.js"
      }
    },
    "ast": null,
    "code": "import express from 'express';\nimport bodyParser from 'body-parser';\nimport cors from 'cors';\nimport mongoose from 'mongoose';\nimport bcrypt from 'bcrypt-nodejs';\nimport crypto from 'crypto';\nconst mongoUrl = process.env.MONGO_URL || \"mongodb://localhost/authAPI\";\nmongoose.connect(mongoUrl, {\n  useNewUrlParser: true,\n  useUnifiedTopology: true\n});\nmongoose.Promise = Promise;\nconst User = mongoose.model('User', {\n  name: {\n    type: String,\n    required: true,\n    minlength: 2,\n    maxlength: 25\n  },\n  email: {\n    type: String,\n    required: true,\n    unique: true\n  },\n  password: {\n    type: String,\n    required: true\n  },\n  accesstoken: {\n    type: String,\n    default: () => crypto.randomBytes(128).toString('hex')\n  }\n});\nconst port = process.env.PORT || 8080;\nconst app = express(); // Add middlewares to enable cors and json body parsing\n\napp.use(cors());\napp.use(bodyParser.json());\n\nconst authenticateUser = async (req, res, next) => {\n  try {\n    const user = await User.findOne({\n      accessToken: req.header('Authorization')\n    });\n\n    if (user) {\n      req.user = user;\n      next();\n    } else {\n      res.status(401).json({\n        loggedOut: true,\n        message: 'Please try logging in again'\n      });\n    }\n  } catch (err) {\n    res.status(403).json({\n      message: 'Access token is missing or wrong',\n      error: err.errors\n    });\n  }\n}; // Do I want to name it Users here or what should I use, depending on the route I am going to use in the StartPage??\n\n\napp.post('/users', async (req, res) => {\n  try {\n    const {\n      name,\n      email,\n      password\n    } = req.body;\n    const user = new User({\n      name,\n      email,\n      password: bcrypt.hashSync(password)\n    });\n    user.save();\n    res.status(201).json({\n      id: user._id,\n      accessToken: user.accessToken\n    });\n  } catch (err) {\n    res.status(400).json({\n      message: \"Could not create user\",\n      errors: err.errors\n    });\n  }\n}); // The same here, what will I call the endpoint??\n\napp.post('/sessions', async (req, res) => {\n  const user = await User.findOne({\n    email: req.body.email\n  });\n\n  if (user && bcrypt.compareSync(req.body.password, user.password)) {\n    res.json({\n      userId: user._id,\n      accessToken: user.accessToken\n    });\n  } else {\n    res.json({\n      notFound: true\n    });\n  }\n}); // the same here, I need to decide what to name my endpoints??\n\napp.get('/users/current', authenticateUser);\napp.get('/users/current', (req, res) => {\n  res.json(req.user);\n}); // Start defining your routes here\n\napp.get('/', (req, res) => {\n  res.send('Hello world');\n}); // Start the server\n\napp.listen(port, () => {\n  console.log(`Server running on http://localhost:${port}`);\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "map": {
      "version": 3,
      "sources": [
        "server.js"
      ],
      "names": [
        "express",
        "bodyParser",
        "cors",
        "mongoose",
        "bcrypt",
        "crypto",
        "mongoUrl",
        "process",
        "env",
        "MONGO_URL",
        "connect",
        "useNewUrlParser",
        "useUnifiedTopology",
        "Promise",
        "User",
        "model",
        "name",
        "type",
        "String",
        "required",
        "minlength",
        "maxlength",
        "email",
        "unique",
        "password",
        "accesstoken",
        "default",
        "randomBytes",
        "toString",
        "port",
        "PORT",
        "app",
        "use",
        "json",
        "authenticateUser",
        "req",
        "res",
        "next",
        "user",
        "findOne",
        "accessToken",
        "header",
        "status",
        "loggedOut",
        "message",
        "err",
        "error",
        "errors",
        "post",
        "body",
        "hashSync",
        "save",
        "id",
        "_id",
        "compareSync",
        "userId",
        "notFound",
        "get",
        "send",
        "listen",
        "console",
        "log"
      ],
      "mappings": "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",
      "sourceRoot": "/Users/angelicabrodin/Desktop/backend/project-backend",
      "sourcesContent": [
        "import express from 'express'\nimport bodyParser from 'body-parser'\nimport cors from 'cors'\nimport mongoose from 'mongoose'\nimport bcrypt from 'bcrypt-nodejs'\nimport crypto from 'crypto'\n\nconst mongoUrl = process.env.MONGO_URL || \"mongodb://localhost/authAPI\"\nmongoose.connect(mongoUrl, { useNewUrlParser: true, useUnifiedTopology: true })\nmongoose.Promise = Promise\n\nconst User = mongoose.model('User', {\n  name: {\n    type: String,\n    required: true,\n    minlength: 2,\n    maxlength: 25\n  },\n  email: {\n    type: String,\n    required: true,\n    unique: true,\n  },\n  password: {\n    type: String,\n    required: true\n  },\n  accesstoken: {\n    type: String,\n    default: () => crypto.randomBytes(128).toString('hex')\n  }\n})\n\nconst port = process.env.PORT || 8080\nconst app = express()\n\n// Add middlewares to enable cors and json body parsing\napp.use(cors())\napp.use(bodyParser.json())\n\n\nconst authenticateUser = async (req, res, next) => {\n  try {\n    const user = await User.findOne({ accessToken: req.header('Authorization') })\n    if (user) {\n      req.user = user\n      next()\n    } else {\n      res.status(401).json({ loggedOut: true, message: 'Please try logging in again' })\n    }\n  } catch (err) {\n    res.status(403).json({ message: 'Access token is missing or wrong', error: err.errors })\n  }\n}\n\n// Do I want to name it Users here or what should I use, depending on the route I am going to use in the StartPage??\n\napp.post('/users', async (req, res) => {\n  try {\n    const { name, email, password } = req.body\n    const user = new User({ name, email, password: bcrypt.hashSync(password) })\n    user.save()\n    res.status(201).json({ id: user._id, accessToken: user.accessToken })\n  } catch (err) {\n    res.status(400).json({ message: \"Could not create user\", errors: err.errors })\n  }\n})\n\n// The same here, what will I call the endpoint??\n\napp.post('/sessions', async (req, res) => {\n  const user = await User.findOne({ email: req.body.email })\n  if (user && bcrypt.compareSync(req.body.password, user.password)) {\n    res.json({ userId: user._id, accessToken: user.accessToken })\n  } else {\n    res.json({ notFound: true })\n  }\n})\n\n// the same here, I need to decide what to name my endpoints??\n\napp.get('/users/current', authenticateUser)\napp.get('/users/current', (req, res) => {\n  res.json(req.user)\n})\n\n\n// Start defining your routes here\napp.get('/', (req, res) => {\n  res.send('Hello world')\n})\n\n// Start the server\napp.listen(port, () => {\n  console.log(`Server running on http://localhost:${port}`)\n})\n"
      ]
    },
    "sourceType": "module",
    "mtime": 1583159048318
  }
}